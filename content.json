{"meta":{"title":"Essays","subtitle":"Record Life","description":null,"author":"❤ Tom Ng","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-04-14T00:34:06.000Z","updated":"2018-04-14T00:34:06.190Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Compare4的破解使用","slug":"Compare4的破解使用","date":"2018-04-13T14:32:55.000Z","updated":"2018-04-14T01:48:06.179Z","comments":true,"path":"2018/04/13/Compare4的破解使用/","link":"","permalink":"http://yoursite.com/2018/04/13/Compare4的破解使用/","excerpt":"","text":"1.官网下载最新版 Beyond Compare 4 并安装http://www.scootersoftware.com/download.php 2.命令1cd /usr/lib/beyondcompare/ 1sudo sed -i \"s/keexjEP3t4Mue23hrnuPtY4TdcsqNiJL-5174TsUdLmJSIXKfG2NGPwBL6vnRPddT7tH29qpkneX63DO9ECSPE9rzY1zhThHERg8lHM9IBFT+rVuiY823aQJuqzxCKIE1bcDqM4wgW01FH6oCBP1G4ub01xmb4BGSUG6ZrjxWHJyNLyIlGvOhoY2HAYzEtzYGwxFZn2JZ66o4RONkXjX0DF9EzsdUef3UAS+JQ+fCYReLawdjEe6tXCv88GKaaPKWxCeaUL9PejICQgRQOLGOZtZQkLgAelrOtehxz5ANOOqCaJgy2mJLQVLM5SJ9Dli909c5ybvEhVmIC0dc9dWH+/N9KmiLVlKMU7RJqnE+WXEEPI1SgglmfmLc1yVH7dqBb9ehOoKG9UE+HAE1YvH1XX2XVGeEqYUY-Tsk7YBTz0WpSpoYyPgx6Iki5KLtQ5G-aKP9eysnkuOAkrvHU8bLbGtZteGwJarev03PhfCioJL4OSqsmQGEvDbHFEbNl1qJtdwEriR+VNZts9vNNLk7UGfeNwIiqpxjk4Mn09nmSd8FhM4ifvcaIbNCRoMPGl6KU12iseSe+w+1kFsLhX+OhQM8WXcWV10cGqBzQE9OqOLUcg9n0krrR3KrohstS9smTwEx9olyLYppvC0p5i7dAx2deWvM1ZxKNs0BvcXGukR+/g\" BCompare 3.此时BCompare文件已被破解，打开软件会提示Trial Mode Error！表示成功，输入Team ZWT生成的密钥即可注册成功123--- BEGIN LICENSE KEY --- GXN1eh9FbDiX1ACdd7XKMV7hL7x0ClBJLUJ-zFfKofjaj2yxE53xauIfkqZ8FoLpcZ0Ux6McTyNmODDSvSIHLYhg1QkTxjCeSCk6ARz0ABJcnUmd3dZYJNWFyJun14rmGByRnVPL49QH+Rs0kjRGKCB-cb8IT4Gf0Ue9WMQ1A6t31MO9jmjoYUeoUmbeAQSofvuK8GN1rLRv7WXfUJ0uyvYlGLqzq1ZoJAJDyo0Kdr4ThF-IXcv2cxVyWVW1SaMq8GFosDEGThnY7C-SgNXW30jqAOgiRjKKRX9RuNeDMFqgP2cuf0NMvyMrMScnM1ZyiAaJJtzbxqN5hZOMClUTE+++--- END LICENSE KEY -----","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://yoursite.com/categories/编程学习/"},{"name":"常用工具","slug":"编程学习/常用工具","permalink":"http://yoursite.com/categories/编程学习/常用工具/"},{"name":"对比","slug":"编程学习/常用工具/对比","permalink":"http://yoursite.com/categories/编程学习/常用工具/对比/"}],"tags":[{"name":"tool","slug":"tool","permalink":"http://yoursite.com/tags/tool/"},{"name":"compare","slug":"compare","permalink":"http://yoursite.com/tags/compare/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-04-13T14:03:08.454Z","updated":"2018-04-13T15:12:36.068Z","comments":true,"path":"2018/04/13/hello-world/","link":"","permalink":"http://yoursite.com/2018/04/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"包、变量、函数","slug":"包、变量、函数","date":"2018-04-13T10:05:49.000Z","updated":"2018-04-14T00:25:02.708Z","comments":true,"path":"2018/04/13/包、变量、函数/","link":"","permalink":"http://yoursite.com/2018/04/13/包、变量、函数/","excerpt":"","text":"包每个 Go 程序都是由包构成的。 程序从 main 包开始运行。 本程序通过导入路径 “fmt” 和 “math/rand” 来使用这两个包。 按照约定，包名与导入路径的最后一个元素一致。例如，”math/rand” 包中的源码均以 package rand 语句开始。 注意： 此程序的运行环境是固定的，因此 rand.Intn 总是会返回相同的数字。 （要得到不同的数字，需为生成器提供不同的种子数，参见 rand.Seed。 练习场中的时间为常量，因此你需要用其它的值作为种子数。） 12345678package mainimport ( \"fmt\" \"math/rand\")func main() &#123; fmt.Println(\"My favorite number is\", rand.Intn(10))&#125; 导入此代码用圆括号组合了导入，这是“分组”形式的导入语句。 当然你也可以编写多个导入语句，例如： import “fmt”import “math”不过使用分组导入语句是更好的形式。 123456789package mainimport ( &quot;fmt&quot; &quot;math&quot;)func main() &#123; fmt.Printf(&quot;Now you have %g problems.&quot;, math.Sqrt(7))&#125; 导出名在 Go 中，如果一个名字以大写字母开头，那么它就是已导出的。例如，Pizza 就是个已导出名，Pi 也同样，它导出自 math 包。 pizza 和 pi 并未以大写字母开头，所以它们是未导出的。 在导入一个包时，你只能引用其中已导出的名字。任何“未导出”的名字在该包外均无法访问。 执行代码，观察错误输出。 然后将 math.pi 改名为 math.Pi 再试着执行一次。 123456789package mainimport ( &quot;fmt&quot; &quot;math&quot;)func main() &#123; fmt.Println(math.pi)&#125; 函数函数可以没有参数或接受多个参数。 在本例中，add 接受两个 int 类型的参数。 注意类型在变量名 之后。 （参考 这篇关于 Go 语法声明的文章了解这种类型声明形式出现的原因。） 1234567891011package mainimport &quot;fmt&quot;func add(x int, y int) int &#123; return x + y&#125;func main() &#123; fmt.Println(add(42, 13))&#125; 当连续两个或多个函数的已命名形参类型相同时，除最后一个类型以外，其它都可以省略。 在本例中， x int, y int被缩写为 x, y int 1234567891011package mainimport &quot;fmt&quot;func add(x, y int) int &#123; return x + y&#125;func main() &#123; fmt.Println(add(42, 13))&#125; 多值返回函数可以返回任意数量的返回值。 swap 函数返回了两个字符串。 123456789101112package mainimport &quot;fmt&quot;func swap(x, y string) (string, string) &#123; return y, x&#125;func main() &#123; a, b := swap(&quot;hello&quot;, &quot;world&quot;) fmt.Println(a, b)&#125; 命名返回值Go 的返回值可被命名，它们会被视作定义在函数顶部的变量。 返回值的名称应当具有一定的意义，它可以作为文档使用。 没有参数的 return 语句返回已命名的返回值。也就是 直接 返回。 直接返回语句应当仅用在下面这样的短函数中。在长的函数中它们会影响代码的可读性。 12345678910111213package mainimport &quot;fmt&quot;func split(sum int) (x, y int) &#123; x = sum * 4 / 9 y = sum - x return&#125;func main() &#123; fmt.Println(split(17))&#125; 变量var 语句用于声明一个变量列表，跟函数的参数列表一样，类型在最后。 就像在这个例子中看到的一样，var 语句可以出现在包或函数级别。12345678910package mainimport &quot;fmt&quot;var c, python, java boolfunc main() &#123; var i int fmt.Println(i, c, python, java)&#125; 变量的初始化变量声明可以包含初始值，每个变量对应一个。 如果初始化值已存在，则可以省略类型；变量会从初始值中获得类型。12345678910package mainimport &quot;fmt&quot;var i, j int = 1, 2func main() &#123; var c, python, java = true, false, &quot;no!&quot; fmt.Println(i, j, c, python, java)&#125; 短变量声明在函数中，简洁赋值语句 := 可在类型明确的地方代替 var 声明。 函数外的每个语句都必须以关键字开始（var, func 等等），因此 := 结构不能在函数外使用。1234567891011package mainimport &quot;fmt&quot;func main() &#123; var i, j int = 1, 2 k := 3 c, python, java := true, false, &quot;no!&quot; fmt.Println(i, j, k, c, python, java)&#125; 基本类型Go 的基本类型有 123456789101112131415boolstringint int8 int16 int32 int64uint uint8 uint16 uint32 uint64 uintptrbyte // uint8 的别名rune // int32 的别名 // 表示一个 Unicode 码点float32 float64complex64 complex128 本例展示了几种类型的变量。 同导入语句一样，变量声明也可以“分组”成一个语法块。 int, uint 和 uintptr 在 32 位系统上通常为 32 位宽，在 64 位系统上则为 64 位宽。 当你需要一个整数值时应使用 int 类型，除非你有特殊的理由使用固定大小或无符号的整数类型。123456789101112131415161718package mainimport ( &quot;fmt&quot; &quot;math/cmplx&quot;)var ( ToBe bool = false MaxInt uint64 = 1&lt;&lt;64 - 1 z complex128 = cmplx.Sqrt(-5 + 12i))func main() &#123; fmt.Printf(&quot;Type: %T Value: %v\\n&quot;, ToBe, ToBe) fmt.Printf(&quot;Type: %T Value: %v\\n&quot;, MaxInt, MaxInt) fmt.Printf(&quot;Type: %T Value: %v\\n&quot;, z, z)&#125; 零值没有明确初始值的变量声明会被赋予它们的 零值。 零值是： 数值类型为 0，布尔类型为 false，字符串为 “”（空字符串）。1234567891011package mainimport &quot;fmt&quot;func main() &#123; var i int var f float64 var b bool var s string fmt.Printf(&quot;%v %v %v %q\\n&quot;, i, f, b, s)&#125; 类型转换表达式 T(v) 将值 v 转换为类型 T。 一些关于数值的转换： 123var i int = 42var f float64 = float64(i)var u uint = uint(f) 或者，更加简单的形式： 123i := 42f := float64(i)u := uint(f) 与 C 不同的是，Go 在不同类型的项之间赋值时需要显式转换。试着移除例子中 float64 或 uint 的转换看看会发生什么。12345678910111213package mainimport ( &quot;fmt&quot; &quot;math&quot;)func main() &#123; var x, y int = 3, 4 var f float64 = math.Sqrt(float64(x*x + y*y)) var z uint = uint(f) fmt.Println(x, y, z)&#125; 类型推导在声明一个变量而不指定其类型时（即使用不带类型的 := 语法或 var = 表达式语法），变量的类型由右值推导得出。 当右值声明了类型时，新变量的类型与其相同： 12var i intj := i // j 也是一个 int 不过当右边包含未指明类型的数值常量时，新变量的类型就可能是 int, float64 或 complex128 了，这取决于常量的精度： 123i := 42 // intf := 3.142 // float64g := 0.867 + 0.5i // complex128 尝试修改示例代码中 v 的初始值，并观察它是如何影响类型的。 12345678package mainimport &quot;fmt&quot;func main() &#123; v := 42 // 修改这里！ fmt.Printf(&quot;v is of type %T\\n&quot;, v)&#125; 常量常量的声明与变量类似，只不过是使用 const 关键字。 常量可以是字符、字符串、布尔值或数值。 常量不能用 := 语法声明。 1234567891011121314package mainimport &quot;fmt&quot;const Pi = 3.14func main() &#123; const World = &quot;世界&quot; fmt.Println(&quot;Hello&quot;, World) fmt.Println(&quot;Happy&quot;, Pi, &quot;Day&quot;) const Truth = true fmt.Println(&quot;Go rules?&quot;, Truth)&#125; 数值常量数值常量是高精度的 值。 一个未指定类型的常量由上下文来决定其类型。 再尝试一下输出 needInt(Big) 吧。 （int 类型最大可以存储一个 64 位的整数，有时会更小。） （int 可以存放最大64位的整数，根据平台不同有时会更少。）12345678910111213141516171819202122package mainimport &quot;fmt&quot;const ( // Create a huge number by shifting a 1 bit left 100 places. // In other words, the binary number that is 1 followed by 100 zeroes. Big = 1 &lt;&lt; 100 // Shift it right again 99 places, so we end up with 1&lt;&lt;1, or 2. Small = Big &gt;&gt; 99)func needInt(x int) int &#123; return x*10 + 1 &#125;func needFloat(x float64) float64 &#123; return x * 0.1&#125;func main() &#123; fmt.Println(needInt(Small)) fmt.Println(needFloat(Small)) fmt.Println(needFloat(Big))&#125;","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://yoursite.com/categories/编程学习/"}],"tags":[{"name":"golang","slug":"golang","permalink":"http://yoursite.com/tags/golang/"},{"name":"语言","slug":"语言","permalink":"http://yoursite.com/tags/语言/"}]}]}